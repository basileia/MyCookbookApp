@page "/recipe/addMy"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using MyCookbook.Shared.DTOs.RecipeDTOs
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Přidání nového receptu</h3>

<EditForm Model="@recipe" OnValidSubmit="HandleValidSubmit" FormName="AddRecipe">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    <div class="mb-3">
        <label for="name" class="form-label">Název receptu</label>
        <InputText id="name" class="form-control" @bind-Value="recipe.Name" @oninput="OnNameChanged" />
    </div>

    <div class="mb-3">
        <label for="servings" class="form-label">Počet porcí</label>
        <InputNumber id="servings" class="form-control" @bind-Value="recipe.NumberOfServings" @onblur="CheckServingsValue" />
        <p>Debug: "@recipe.NumberOfServings"</p>
    </div>

    <h5>Postup přípravy</h5>

    @for (int i = 0; i < recipe.Steps.Count; i++)
    {
        var stepIndex = i;
        <div class="mb-2 d-flex align-items-start">
            <div class="flex-grow-1">
                <InputText class="form-control" @bind-Value="recipe.Steps[stepIndex].Description"
                           placeholder="@($"Popis kroku {stepIndex + 1}")" />
                <ValidationMessage For="@(() => recipe.Steps[stepIndex].Description)" />
            </div>
            @if (recipe.Steps.Count > 1)
            {
                <button type="button" class="btn btn-danger ms-2" @onclick="() => RemoveStep(stepIndex)">✕</button>
            }
        </div>
    }

    <button type="button" class="btn btn-secondary mb-3" @onclick="AddStep">Přidat krok</button>

    <div>
        <button type="submit" class="btn btn-primary">Uložit recept</button>
    </div>
</EditForm>

@code {
    private CreateRecipeDto recipe = new();
    private string? errorMessage;

    protected override void OnInitialized()
    {
        if (recipe.NumberOfServings == 0)
            recipe.NumberOfServings = 1;

        if (recipe.Steps.Count == 0)
            recipe.Steps.Add(new RecipeStepDto());
    }

    private void CheckServingsValue()
    {
        if (recipe.NumberOfServings <= 0 || recipe.NumberOfServings == null)
        {
            recipe.NumberOfServings = 1;
        }
    }

    private void AddStep()
    {
        recipe.Steps.Add(new RecipeStepDto());
    }

    private void RemoveStep(int index)
    {
        if (recipe.Steps.Count > 1)
        {
            recipe.Steps.RemoveAt(index);
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"Před odesláním: Název='{recipe.Name}', Porce={recipe.NumberOfServings}");
        var response = await Http.PostAsJsonAsync("api/recipes", recipe);
        Console.WriteLine("Odesílám recept: " + recipe.Name);

        if (string.IsNullOrWhiteSpace(recipe.Name))
        {
            Console.WriteLine("Prázdný název");
            return;
        }


        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            var error = await response.Content.ReadFromJsonAsync<Error>();
            errorMessage = error?.Details ?? "Neznámá chyba při odesílání receptu.";
        }
    }

    private void OnNameChanged(ChangeEventArgs e)
    {
        recipe.Name = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }
}
