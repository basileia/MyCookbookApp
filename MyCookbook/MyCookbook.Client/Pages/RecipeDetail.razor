@page "/recipe/{id:int}"
@using MyCookbook.Shared.DTOs.RecipeDTOs
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims


<h2>@recipe?.Name</h2>

@if (recipe == null)
{
    <p>Načítám...</p>
}
else
{
    <div>
        <p><strong>Počet porcí:</strong> @recipe.NumberOfServings</p>
        <div class="recipe-container">
            <div class="recipe-ingredients">
                <p><strong>Suroviny:</strong></p>
                @if (recipe.Ingredients == null || !recipe.Ingredients.Any())
                {
                    <p>Žádné suroviny</p>
                }
                else
                {
                    <ul>
                        @foreach (var ingredient in recipe.Ingredients)
                        {
                            <li>@ingredient.IngredientName</li>
                        }
                    </ul>
                }
            </div>
            <div class="recipe-preparation">
                <p><strong>Postup:</strong></p>
                @if (recipe.Steps == null || !recipe.Steps.Any())
                {
                    <p>Žádné kroky k přípravě.</p>
                }
                else
                {
                    <ol>
                        @foreach (var step in recipe.Steps)
                        {
                            <li>@step.Description</li>
                        }
                    </ol>
                }
            </div>
        </div>        

        @if (isUserAuthenticated && recipe.UserId == currentUserId)
        {
            <button @onclick="DeleteRecipe" class="delete-button">Smazat</button>
        }
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    private RecipeDetailDto? recipe;
    private bool isUserAuthenticated;
    private string currentUserId = "";

    protected override async Task OnInitializedAsync()
    {
        try {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            isUserAuthenticated = user.Identity?.IsAuthenticated ?? false;

            if (isUserAuthenticated)
            {
                currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            }

            recipe = await Http.GetFromJsonAsync<RecipeDetailDto>($"/api/recipes/{Id}");
        }
        catch(Exception ex) {
            Console.WriteLine($"Chyba: {ex.Message}");
        }        
    }

    private async Task DeleteRecipe()
    {
        var response = await Http.DeleteAsync($"/api/recipes/{Id}");

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("Došlo k chybě při mazání.");
        }
    }
}